using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using OpenQA.Selenium;
using OpenQA.Selenium.Interactions;

namespace SeleniumDocs.ActionsAPI
{
    [TestClass]
    public class PenTest : BaseTest
    {
        [TestMethod]
        public void UsePen()
        {
            driver.Url = "https://selenium.dev/selenium/web/pointerActionsPage.html";
            DateTime start = DateTime.Now;

            Point location = driver.FindElement(By.Id("pointerArea")).Location;
            ActionBuilder actionBuilder = new ActionBuilder();
            PointerInputDevice pen = new PointerInputDevice(PointerKind.Pen, "default pen");
            
            actionBuilder.AddAction(pen.CreatePointerMove(CoordinateOrigin.Pointer, 
                location.X + 5, location.Y + 5, TimeSpan.FromMilliseconds(800)));
            actionBuilder.AddAction(pen.CreatePointerDown(MouseButton.Left));
            actionBuilder.AddAction(pen.CreatePointerMove(CoordinateOrigin.Pointer,
                2, 2, TimeSpan.FromMilliseconds(800)));
            actionBuilder.AddAction(pen.CreatePointerUp(MouseButton.Left));
            ((IActionExecutor)driver).PerformActions(actionBuilder.ToActionSequenceList());

            Assert.IsTrue(DateTime.Now - start > TimeSpan.FromSeconds(1.6));

            var moves = driver.FindElements(By.ClassName("pointermove"));
            var moveTo = getProperties(moves.ElementAt(0));
            var down = getProperties(driver.FindElement(By.ClassName("pointerdown")));
            var moveBy = getProperties(moves.ElementAt(1));
            var up = getProperties(driver.FindElement(By.ClassName("pointerup")));

            Assert.AreEqual("-1", moveTo["button"]);
            Assert.AreEqual((location.X + 5).ToString(), moveTo["pageX"]);
            Assert.AreEqual((location.Y + 5).ToString(), moveTo["pageY"]);
            Assert.AreEqual("0", down["button"]);
            Assert.AreEqual((location.X + 5).ToString(), down["pageX"]);
            Assert.AreEqual((location.Y + 5).ToString(), down["pageY"]);
            Assert.AreEqual("-1", moveBy["button"]);
            Assert.AreEqual((location.X + 5 + 2).ToString(), moveBy["pageX"]);
            Assert.AreEqual((location.Y + 5 + 2).ToString(), moveBy["pageY"]);
            Assert.AreEqual("0", up["button"]);
            Assert.AreEqual((location.X + 5 + 2).ToString(), up["pageX"]);
            Assert.AreEqual((location.Y + 5 + 2).ToString(), up["pageY"]);

        }

        private Dictionary<string, string> getProperties(IWebElement element)
        {
            var str = element.Text;
            str = str[(str.Split()[0].Length + 1)..];
            IEnumerable<string[]> keyValue = str.Split(", ").Select(part => part.Split(":"));
            return keyValue.ToDictionary(split => split[0].Trim(), split => split[1].Trim());
        }
        
    }
}